

<div class="modal-overlay" style="@OverlayDisplay" @onclick="CloseModal"></div>
<div class="modal" tabindex="-1" style="@ModalDisplay">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header bg-light">
                <h5 class="modal-title">@Title</h5>
                <button type="button" class="btn-close" @onclick="CloseModal"></button>
            </div>
            <div class="modal-body">
                @ChildContent
            </div>

        </div>
    </div>
</div>
<style>
    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5); /* Semi-transparent background */
        backdrop-filter: blur(10px); /* Apply blur effect */
        z-index: 1040; /* Behind the modal */
        display: none;
    }

    /* Modal itself */
    .modal {
        display: none;
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        z-index: 1050; /* Above the overlay */
        width: 100%;
        max-width: 500px;
    }

    .modal-dialog {
        margin: 0;
        width: 100%;
    }
</style>
@code {
    [Parameter] public string Title { get; set; }
    [Parameter] public RenderFragment ChildContent { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }

    private string ModalDisplay { get; set; } = "display:none;";
    private string OverlayDisplay { get; set; } = "display:none;";
    private string errorMessage { get; set; }

    public void OpenModal()
    {
        ModalDisplay = "display:block;";
        OverlayDisplay = "display:block;";
        StateHasChanged();
    }

    public async Task CloseModal()
    {
        ModalDisplay = "display:none;";
        OverlayDisplay = "display:none;";
        await OnClose.InvokeAsync();
        StateHasChanged();
    }

}
